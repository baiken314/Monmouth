1)
Some possible outputs:

C     C     C    B    B    C    B
C     C     C    B    C    B    C
MAIN  B     B    C    B    B    C
B     B     MAIN C    C    C    MAIN
B     MAIN  B    MAIN MAIN MAIN B

This happens because t1 and t2 are both started but only t1 is joined. This means that the main is stopped when t1 is joined to it, but t1 and t2 are both started. t1 must finish before MAIN is printed, however, it will run concurrently with t2, and after t1 finishes, main and t2 run concurrently, meaning that MAIN can be printed while t2 is printing.

main: start
t1: start
t2: start
t1: join
t1: finish before main
main, t2: finish

2)
Deterministic output:

X=1 Name=main State=RUNNABLE
X=0 Name=t1 State=RUNNABLE
X=1 Name=main State=RUNNABLE
x=0 Name=t2 State=RUNNABLE
x=3 Name=main State=RUNNABLE

This is the only possible output because t1, t2, and main all finish in sequence following each other. Because t1 is joined before t2 is started, t1 runs, then t2 is joined and runs, and then the main finished. The threads do not run concurrently during the execution of the program so there is only one output, which is the above. 

main: start
t1: start
t1: join
t1: finish
t2: start
t2: join
t2: finish
main: finish
